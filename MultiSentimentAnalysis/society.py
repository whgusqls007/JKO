# -*- coding: utf-8 -*-
"""load_society_label5_news_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l1JAuu-uF_e7qLu4yQmsMUbGRXlTuZ2z
"""

!pip install mxnet
!pip install gluonnlp
!pip install transformers==3.0.2
!pip install torch
!python -m pip install pymongo==3.7.2
!pip install dnspython

!pip install git+https://git@github.com/SKTBrain/KoBERT.git@master

import torch
from torch import nn
import numpy as np
from kobert.utils import get_tokenizer
import gluonnlp as nlp
from kobert.pytorch_kobert import get_pytorch_kobert_model
from torch.utils.data import Dataset

class BERTClassifier(nn.Module):
    def __init__(self,
                 bert,
                 hidden_size = 768,
                 num_classes=5,   ##클래스 수 조정##
                 dr_rate=None,
                 params=None):
        super(BERTClassifier, self).__init__()
        self.bert = bert
        self.dr_rate = dr_rate
                 
        self.classifier = nn.Linear(hidden_size , num_classes)
        if dr_rate:
            self.dropout = nn.Dropout(p=dr_rate)
    
    def gen_attention_mask(self, token_ids, valid_length):
        attention_mask = torch.zeros_like(token_ids)
        for i, v in enumerate(valid_length):
            attention_mask[i][:v] = 1
        return attention_mask.float()

    def forward(self, token_ids, valid_length, segment_ids):
        attention_mask = self.gen_attention_mask(token_ids, valid_length)
        
        _, pooler = self.bert(input_ids = token_ids, token_type_ids = segment_ids.long(), attention_mask = attention_mask.float().to(token_ids.device))
        if self.dr_rate:
            out = self.dropout(pooler)
        return self.classifier(out)

class BERTDataset(Dataset):
    def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer, max_len,
                 pad, pair):
        transform = nlp.data.BERTSentenceTransform(
            bert_tokenizer, max_seq_length=max_len, pad=pad, pair=pair)

        self.sentences = [transform([i[sent_idx]]) for i in dataset]
        self.labels = [np.int32(i[label_idx]) for i in dataset]

    def __getitem__(self, i):
        return (self.sentences[i] + (self.labels[i], ))

    def __len__(self):
        return (len(self.labels))

#구글드라이브 연동
from google.colab import drive
drive.mount('/content/drive')

device = torch.device("cuda:0")

bertmodel, vocab = get_pytorch_kobert_model()

# 카테고리 별로 모델 나눠서 진행해야함 
model_loaded = BERTClassifier(bertmodel,  dr_rate=0.5).to(device)
model_loaded = torch.load('/content/drive/MyDrive/Colab Notebooks/Sentiment/model/society/' + 'society_model.pt')

model_loaded.eval()

# Setting parameters
max_len = 64
batch_size = 64

#토큰화
tokenizer = get_tokenizer()
tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)

def predict(predict_sentence, model):

    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=2)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)


        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == 0:
                #print('따뜻한')
                return('따뜻한')
                #return '0'
            elif np.argmax(logits) == 1:
                #print('신기한')
                return('신기한')
                #return '1'
            elif np.argmax(logits) == 2:
                #print('충격적인')
                return('충격적인')
                #return '2'
            elif np.argmax(logits) == 3:
                #print('슬픈')
                return('슬픈')
                #return '3'
            elif np.argmax(logits) == 4:
                #print('중립')
                return('중립')
                #return '4'

predict('"처녀가 없다" 성희롱·지역 비하 발언 해경 경무관 강등', model_loaded)

predict('강제출국 5년만에 입국한 ‘에이미’ 구속…세번째 마약 투약 혐의', model_loaded)

predict('“내후년 무인車 실제 도로 달린다”… 현대차 ‘아이오닉5 로보택시’ 공개', model_loaded)

#connecting to DB
import pymongo
from pymongo import MongoClient

client = MongoClient('mongodb+srv://admin:admin@clustertutorial.cxa5s.mongodb.net/Donga?retryWrites=true&w=majority')
db = client['Donga']
'''
  collection list를 사용해 인덱스만으로 반복문 돌릴 예정
'''
col_list = ['api_busan',
            'api_donga',
            'api_hangook',
            'api_joongang',
            'api_joseon',
            'api_nocut',
            'api_ohmynews',
            'api_wikitree',
            'api_yeonhap',
            'api_herald'
          ]

'''
몽고디비에서 타이틀을 가져온 뒤 타이틀을 모델에 넣고 emotion 이 결정되면 수정해서 넣어줌

_id, title, emotion 을 사용

1. emotion=""인 collection 을 모두 찾음
2. _id,title 각각 list에 저장
3. title을 for문을 돌면서 emotion 저장
4. _id 와 title 인덱스 값을 사용한다. 
	_id 를 find_one 함수를 사용해서 emotion field를 수정한다.
'''
for pressIndex,pressName in enumerate(col_list):
  

  id_list = []
  title_list = []
  emotion_list = []
  cnt = 0

  collection = db[pressName]  # 지금은 0 : api_busan
  for x in collection.find():
    #print(x) # 확인용

    # 카테고리 마다 모델이 다르기 때문에 필터링 && emotion 없는 것만
    if x['category'] == 'society' and  x['emotion'] == '':
      id_list.append(x['_id'])
      title_list.append(x['title'])
      cnt +=1

  print(cnt) #확인용

  for i,title in enumerate(title_list):
    print("(",i,",",title,",", predict(title, model_loaded),")")  # 확인용

    # 모델에 적용시킴
    emotion_list.append(predict(title, model_loaded))
    
    # 이제 몽고디비 넣자.
    collection.update_one({'_id' :id_list[i]},{'$set' : {'emotion' : emotion_list[i]}})
                      
  print(emotion_list) # 확인용

